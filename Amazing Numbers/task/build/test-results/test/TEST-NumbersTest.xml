<?xml version="1.0" encoding="UTF-8"?>
<testsuite name="NumbersTest" tests="1" skipped="0" failures="1" errors="0" timestamp="2023-09-17T20:54:04" hostname="macbook-pro-uzivatela-cuninka.home" time="1.291">
  <properties/>
  <testcase name="start" classname="NumbersTest" time="1.291">
    <failure message="java.lang.AssertionError: Wrong answer in test #18&#10;&#10;Can't parse line: &quot;Properties of 1&quot;. Expected: 1 is ...&#10;&#10;Please find below the output of your program during this failed test.&#10;Note that the '&gt;' character indicates the beginning of the input line.&#10;&#10;---&#10;&#10;Welcome to Amazing Numbers!&#10;&#10;Supported requests:&#10;- enter a natural number to know its properties;&#10;- enter two natural numbers to obtain the properties of the list:&#10; * the first parameter represents a starting number;&#10; * the second parameter shows how many consecutive numbers are to be printed;&#10;- two natural numbers and a property to search for;&#10;- two natural numbers and two properties to search for;&#10;- separate the parameters with one space; &#10;- enter 0 to exit.&#10;&#10;Enter a request: &gt; &gt; 1 15&#10;Properties of 1&#10;2 is even, palindromic, spy&#10;3 is palindromic, spy, odd, sunny&#10;4 is square, even, palindromic, spy&#10;5 is palindromic, spy, odd&#10;6 is even, palindromic, spy&#10;7 is palindromic, buzz, spy, odd&#10;8 is even, palindromic, spy, sunny&#10;9 is square, palindromic, spy, odd&#10;10 is duck, even&#10;11 is palindromic, odd&#10;12 is even&#10;13 is odd&#10;14 is even, buzz&#10;15 is odd, sunny&#10;Enter a request: &gt;" type="java.lang.AssertionError">java.lang.AssertionError: Wrong answer in test #18

Can't parse line: &quot;Properties of 1&quot;. Expected: 1 is ...

Please find below the output of your program during this failed test.
Note that the '&gt;' character indicates the beginning of the input line.

---

Welcome to Amazing Numbers!

Supported requests:
- enter a natural number to know its properties;
- enter two natural numbers to obtain the properties of the list:
 * the first parameter represents a starting number;
 * the second parameter shows how many consecutive numbers are to be printed;
- two natural numbers and a property to search for;
- two natural numbers and two properties to search for;
- separate the parameters with one space; 
- enter 0 to exit.

Enter a request: &gt; &gt; 1 15
Properties of 1
2 is even, palindromic, spy
3 is palindromic, spy, odd, sunny
4 is square, even, palindromic, spy
5 is palindromic, spy, odd
6 is even, palindromic, spy
7 is palindromic, buzz, spy, odd
8 is even, palindromic, spy, sunny
9 is square, palindromic, spy, odd
10 is duck, even
11 is palindromic, odd
12 is even
13 is odd
14 is even, buzz
15 is odd, sunny
Enter a request: &gt;
	at org.junit.Assert.fail(Assert.java:89)
	at org.hyperskill.hstest.stage.StageTest.start(StageTest.java:203)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner$3.evaluate(ParentRunner.java:306)
	at org.junit.runners.BlockJUnit4ClassRunner$1.evaluate(BlockJUnit4ClassRunner.java:100)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:366)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:103)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:63)
	at org.junit.runners.ParentRunner$4.run(ParentRunner.java:331)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:79)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:329)
	at org.junit.runners.ParentRunner.access$100(ParentRunner.java:66)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:293)
	at org.junit.runners.ParentRunner$3.evaluate(ParentRunner.java:306)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:413)
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.runTestClass(JUnitTestClassExecutor.java:110)
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:58)
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:38)
	at org.gradle.api.internal.tasks.testing.junit.AbstractJUnitTestClassProcessor.processTestClass(AbstractJUnitTestClassProcessor.java:62)
	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.processTestClass(SuiteTestClassProcessor.java:51)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:36)
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)
	at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:33)
	at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:94)
	at jdk.proxy1/jdk.proxy1.$Proxy2.processTestClass(Unknown Source)
	at org.gradle.api.internal.tasks.testing.worker.TestWorker$2.run(TestWorker.java:176)
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.executeAndMaintainThreadName(TestWorker.java:129)
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.execute(TestWorker.java:100)
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.execute(TestWorker.java:60)
	at org.gradle.process.internal.worker.child.ActionExecutionWorker.execute(ActionExecutionWorker.java:56)
	at org.gradle.process.internal.worker.child.SystemApplicationClassLoaderWorker.call(SystemApplicationClassLoaderWorker.java:133)
	at org.gradle.process.internal.worker.child.SystemApplicationClassLoaderWorker.call(SystemApplicationClassLoaderWorker.java:71)
	at worker.org.gradle.process.internal.worker.GradleWorkerMain.run(GradleWorkerMain.java:69)
	at worker.org.gradle.process.internal.worker.GradleWorkerMain.main(GradleWorkerMain.java:74)
</failure>
  </testcase>
  <system-out><![CDATA[?[1;31m
Start test 1?[0m
Welcome to Amazing Numbers!

Supported requests:
- enter a natural number to know its properties;
- enter two natural numbers to obtain the properties of the list:
 * the first parameter represents a starting number;
 * the second parameter shows how many consecutive numbers are to be printed;
- two natural numbers and a property to search for;
- two natural numbers and two properties to search for;
- separate the parameters with one space; 
- enter 0 to exit.

Enter a request: > > 0

Goodbye!
?[1;31m
Start test 2?[0m
Welcome to Amazing Numbers!

Supported requests:
- enter a natural number to know its properties;
- enter two natural numbers to obtain the properties of the list:
 * the first parameter represents a starting number;
 * the second parameter shows how many consecutive numbers are to be printed;
- two natural numbers and a property to search for;
- two natural numbers and two properties to search for;
- separate the parameters with one space; 
- enter 0 to exit.

Enter a request: > > -124

The first parameter should be a natural number or zero.

Enter a request: > > 0

Goodbye!
?[1;31m
Start test 3?[0m
Welcome to Amazing Numbers!

Supported requests:
- enter a natural number to know its properties;
- enter two natural numbers to obtain the properties of the list:
 * the first parameter represents a starting number;
 * the second parameter shows how many consecutive numbers are to be printed;
- two natural numbers and a property to search for;
- two natural numbers and two properties to search for;
- separate the parameters with one space; 
- enter 0 to exit.

Enter a request: > > -8

The first parameter should be a natural number or zero.

Enter a request: > > 0

Goodbye!
?[1;31m
Start test 4?[0m
Welcome to Amazing Numbers!

Supported requests:
- enter a natural number to know its properties;
- enter two natural numbers to obtain the properties of the list:
 * the first parameter represents a starting number;
 * the second parameter shows how many consecutive numbers are to be printed;
- two natural numbers and a property to search for;
- two natural numbers and two properties to search for;
- separate the parameters with one space; 
- enter 0 to exit.

Enter a request: > > -65

The first parameter should be a natural number or zero.

Enter a request: > > 0

Goodbye!
?[1;31m
Start test 5?[0m
Welcome to Amazing Numbers!

Supported requests:
- enter a natural number to know its properties;
- enter two natural numbers to obtain the properties of the list:
 * the first parameter represents a starting number;
 * the second parameter shows how many consecutive numbers are to be printed;
- two natural numbers and a property to search for;
- two natural numbers and two properties to search for;
- separate the parameters with one space; 
- enter 0 to exit.

Enter a request: > > -26

The first parameter should be a natural number or zero.

Enter a request: > > 0

Goodbye!
?[1;31m
Start test 6?[0m
Welcome to Amazing Numbers!

Supported requests:
- enter a natural number to know its properties;
- enter two natural numbers to obtain the properties of the list:
 * the first parameter represents a starting number;
 * the second parameter shows how many consecutive numbers are to be printed;
- two natural numbers and a property to search for;
- two natural numbers and two properties to search for;
- separate the parameters with one space; 
- enter 0 to exit.

Enter a request: > > -32

The first parameter should be a natural number or zero.

Enter a request: > > 0

Goodbye!
?[1;31m
Start test 7?[0m
Welcome to Amazing Numbers!

Supported requests:
- enter a natural number to know its properties;
- enter two natural numbers to obtain the properties of the list:
 * the first parameter represents a starting number;
 * the second parameter shows how many consecutive numbers are to be printed;
- two natural numbers and a property to search for;
- two natural numbers and two properties to search for;
- separate the parameters with one space; 
- enter 0 to exit.

Enter a request: > > 14973 -25129

The second parameter should be a natural number.

Enter a request: > > 0

Goodbye!
?[1;31m
Start test 8?[0m
Welcome to Amazing Numbers!

Supported requests:
- enter a natural number to know its properties;
- enter two natural numbers to obtain the properties of the list:
 * the first parameter represents a starting number;
 * the second parameter shows how many consecutive numbers are to be printed;
- two natural numbers and a property to search for;
- two natural numbers and two properties to search for;
- separate the parameters with one space; 
- enter 0 to exit.

Enter a request: > > 20437 -4171

The second parameter should be a natural number.

Enter a request: > > 0

Goodbye!
?[1;31m
Start test 9?[0m
Welcome to Amazing Numbers!

Supported requests:
- enter a natural number to know its properties;
- enter two natural numbers to obtain the properties of the list:
 * the first parameter represents a starting number;
 * the second parameter shows how many consecutive numbers are to be printed;
- two natural numbers and a property to search for;
- two natural numbers and two properties to search for;
- separate the parameters with one space; 
- enter 0 to exit.

Enter a request: > > 27062 -30033

The second parameter should be a natural number.

Enter a request: > > 0

Goodbye!
?[1;31m
Start test 10?[0m
Welcome to Amazing Numbers!

Supported requests:
- enter a natural number to know its properties;
- enter two natural numbers to obtain the properties of the list:
 * the first parameter represents a starting number;
 * the second parameter shows how many consecutive numbers are to be printed;
- two natural numbers and a property to search for;
- two natural numbers and two properties to search for;
- separate the parameters with one space; 
- enter 0 to exit.

Enter a request: > > 15478 -20173

The second parameter should be a natural number.

Enter a request: > > 0

Goodbye!
?[1;31m
Start test 11?[0m
Welcome to Amazing Numbers!

Supported requests:
- enter a natural number to know its properties;
- enter two natural numbers to obtain the properties of the list:
 * the first parameter represents a starting number;
 * the second parameter shows how many consecutive numbers are to be printed;
- two natural numbers and a property to search for;
- two natural numbers and two properties to search for;
- separate the parameters with one space; 
- enter 0 to exit.

Enter a request: > > 17801 -19655

The second parameter should be a natural number.

Enter a request: > > 0

Goodbye!
?[1;31m
Start test 12?[0m
Welcome to Amazing Numbers!

Supported requests:
- enter a natural number to know its properties;
- enter two natural numbers to obtain the properties of the list:
 * the first parameter represents a starting number;
 * the second parameter shows how many consecutive numbers are to be printed;
- two natural numbers and a property to search for;
- two natural numbers and two properties to search for;
- separate the parameters with one space; 
- enter 0 to exit.

Enter a request: > > 24821 -2469

The second parameter should be a natural number.

Enter a request: > > 0

Goodbye!
?[1;31m
Start test 13?[0m
Welcome to Amazing Numbers!

Supported requests:
- enter a natural number to know its properties;
- enter two natural numbers to obtain the properties of the list:
 * the first parameter represents a starting number;
 * the second parameter shows how many consecutive numbers are to be printed;
- two natural numbers and a property to search for;
- two natural numbers and two properties to search for;
- separate the parameters with one space; 
- enter 0 to exit.

Enter a request: > > 8619 -4330

The second parameter should be a natural number.

Enter a request: > > 0

Goodbye!
?[1;31m
Start test 14?[0m
Welcome to Amazing Numbers!

Supported requests:
- enter a natural number to know its properties;
- enter two natural numbers to obtain the properties of the list:
 * the first parameter represents a starting number;
 * the second parameter shows how many consecutive numbers are to be printed;
- two natural numbers and a property to search for;
- two natural numbers and two properties to search for;
- separate the parameters with one space; 
- enter 0 to exit.

Enter a request: > > 4920 -5238

The second parameter should be a natural number.

Enter a request: > > 0

Goodbye!
?[1;31m
Start test 15?[0m
Welcome to Amazing Numbers!

Supported requests:
- enter a natural number to know its properties;
- enter two natural numbers to obtain the properties of the list:
 * the first parameter represents a starting number;
 * the second parameter shows how many consecutive numbers are to be printed;
- two natural numbers and a property to search for;
- two natural numbers and two properties to search for;
- separate the parameters with one space; 
- enter 0 to exit.

Enter a request: > > 6695 -17470

The second parameter should be a natural number.

Enter a request: > > 0

Goodbye!
?[1;31m
Start test 16?[0m
Welcome to Amazing Numbers!

Supported requests:
- enter a natural number to know its properties;
- enter two natural numbers to obtain the properties of the list:
 * the first parameter represents a starting number;
 * the second parameter shows how many consecutive numbers are to be printed;
- two natural numbers and a property to search for;
- two natural numbers and two properties to search for;
- separate the parameters with one space; 
- enter 0 to exit.

Enter a request: > > 6405 -20685

The second parameter should be a natural number.

Enter a request: > > 0

Goodbye!
?[1;31m
Start test 17?[0m
Welcome to Amazing Numbers!

Supported requests:
- enter a natural number to know its properties;
- enter two natural numbers to obtain the properties of the list:
 * the first parameter represents a starting number;
 * the second parameter shows how many consecutive numbers are to be printed;
- two natural numbers and a property to search for;
- two natural numbers and two properties to search for;
- separate the parameters with one space; 
- enter 0 to exit.

Enter a request: > > 1
Properties of 1
	square: true
	gapful: false
	duck: false
	even: false
	palindromic: true
	buzz: false
	spy: true
	odd: true
	sunny: false
Enter a request: > > 2
Properties of 2
	square: false
	gapful: false
	duck: false
	even: true
	palindromic: true
	buzz: false
	spy: true
	odd: false
	sunny: false
Enter a request: > > 3
Properties of 3
	square: false
	gapful: false
	duck: false
	even: false
	palindromic: true
	buzz: false
	spy: true
	odd: true
	sunny: true
Enter a request: > > 4
Properties of 4
	square: true
	gapful: false
	duck: false
	even: true
	palindromic: true
	buzz: false
	spy: true
	odd: false
	sunny: false
Enter a request: > > 5
Properties of 5
	square: false
	gapful: false
	duck: false
	even: false
	palindromic: true
	buzz: false
	spy: true
	odd: true
	sunny: false
Enter a request: > > 6
Properties of 6
	square: false
	gapful: false
	duck: false
	even: true
	palindromic: true
	buzz: false
	spy: true
	odd: false
	sunny: false
Enter a request: > > 7
Properties of 7
	square: false
	gapful: false
	duck: false
	even: false
	palindromic: true
	buzz: true
	spy: true
	odd: true
	sunny: false
Enter a request: > > 8
Properties of 8
	square: false
	gapful: false
	duck: false
	even: true
	palindromic: true
	buzz: false
	spy: true
	odd: false
	sunny: true
Enter a request: > > 9
Properties of 9
	square: true
	gapful: false
	duck: false
	even: false
	palindromic: true
	buzz: false
	spy: true
	odd: true
	sunny: false
Enter a request: > > 10
Properties of 10
	square: false
	gapful: false
	duck: true
	even: true
	palindromic: false
	buzz: false
	spy: false
	odd: false
	sunny: false
Enter a request: > > 11
Properties of 11
	square: false
	gapful: false
	duck: false
	even: false
	palindromic: true
	buzz: false
	spy: false
	odd: true
	sunny: false
Enter a request: > > 12
Properties of 12
	square: false
	gapful: false
	duck: false
	even: true
	palindromic: false
	buzz: false
	spy: false
	odd: false
	sunny: false
Enter a request: > > 13
Properties of 13
	square: false
	gapful: false
	duck: false
	even: false
	palindromic: false
	buzz: false
	spy: false
	odd: true
	sunny: false
Enter a request: > > 14
Properties of 14
	square: false
	gapful: false
	duck: false
	even: true
	palindromic: false
	buzz: true
	spy: false
	odd: false
	sunny: false
Enter a request: > > 669992181511883268
Properties of 669992181511883268
	square: false
	gapful: false
	duck: false
	even: true
	palindromic: false
	buzz: false
	spy: false
	odd: false
	sunny: false
Enter a request: > > 8286232459398851185
Properties of 8286232459398851185
	square: false
	gapful: false
	duck: false
	even: false
	palindromic: false
	buzz: false
	spy: false
	odd: true
	sunny: false
Enter a request: > > 7713008215689778784
Properties of 7713008215689778784
	square: false
	gapful: false
	duck: true
	even: true
	palindromic: false
	buzz: false
	spy: false
	odd: false
	sunny: false
Enter a request: > > 8188668647547261313
Properties of 8188668647547261313
	square: false
	gapful: false
	duck: false
	even: false
	palindromic: false
	buzz: false
	spy: false
	odd: true
	sunny: false
Enter a request: > > 8427594269981180555
Properties of 8427594269981180555
	square: false
	gapful: false
	duck: true
	even: false
	palindromic: false
	buzz: false
	spy: false
	odd: true
	sunny: false
Enter a request: > > 1818718076120305755
Properties of 1818718076120305755
	square: false
	gapful: true
	duck: true
	even: false
	palindromic: false
	buzz: false
	spy: false
	odd: true
	sunny: false
Enter a request: > > 1782616198591143998
Properties of 1782616198591143998
	square: false
	gapful: false
	duck: false
	even: true
	palindromic: false
	buzz: false
	spy: false
	odd: false
	sunny: false
Enter a request: > > 7220689867687648307
Properties of 7220689867687648307
	square: false
	gapful: false
	duck: true
	even: false
	palindromic: false
	buzz: true
	spy: false
	odd: true
	sunny: false
Enter a request: > > 8828154762723017568
Properties of 8828154762723017568
	square: false
	gapful: true
	duck: true
	even: true
	palindromic: false
	buzz: true
	spy: false
	odd: false
	sunny: false
Enter a request: > > 8696874502166013647
Properties of 8696874502166013647
	square: false
	gapful: false
	duck: true
	even: false
	palindromic: false
	buzz: true
	spy: false
	odd: true
	sunny: false
Enter a request: > > 0

Goodbye!
?[1;31m
Start test 18?[0m
Welcome to Amazing Numbers!

Supported requests:
- enter a natural number to know its properties;
- enter two natural numbers to obtain the properties of the list:
 * the first parameter represents a starting number;
 * the second parameter shows how many consecutive numbers are to be printed;
- two natural numbers and a property to search for;
- two natural numbers and two properties to search for;
- separate the parameters with one space; 
- enter 0 to exit.

Enter a request: > > 1 15
Properties of 1
2 is even, palindromic, spy
3 is palindromic, spy, odd, sunny
4 is square, even, palindromic, spy
5 is palindromic, spy, odd
6 is even, palindromic, spy
7 is palindromic, buzz, spy, odd
8 is even, palindromic, spy, sunny
9 is square, palindromic, spy, odd
10 is duck, even
11 is palindromic, odd
12 is even
13 is odd
14 is even, buzz
15 is odd, sunny
]]></system-out>
  <system-err><![CDATA[]]></system-err>
</testsuite>
